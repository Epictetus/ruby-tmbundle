<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby

require "#{ENV["TM_SUPPORT_PATH"]}/lib/exit_codes"
require "#{ENV["TM_SUPPORT_PATH"]}/lib/escape"
require "#{ENV["TM_SUPPORT_PATH"]}/lib/dialog"

require "erb"
include ERB::Util
require "pstore"

RAKEMATE_VERSION = "1.1.0".freeze

rake = ENV["TM_RAKE"] ||
       ENV["PATH"].split(":").map { |dir| File.join(dir, "rake") }.
                              find { |r| File.exist? r }
TextMate.exit_show_tool_tip("Rake not found.  Please set TM_RAKE.") if rake.nil?

DEFAULT_TASK = "(default task)".freeze
RAKEFILE_DIR = (ENV["TM_PROJECT_DIRECTORY"] || ENV["TM_DIRECTORY"]).freeze

prefs = PStore.new( File.expand_path( "~/Library/Preferences/" +
                                      "com.macromates.textmate.run_rake" ) )

Dir.chdir(RAKEFILE_DIR)
tasks = `#{rake} --tasks`

TextMate.exit_show_tool_tip("Could not fetch task list.") unless $?.exited?

tasks = [DEFAULT_TASK] + tasks.grep(/^rake\s+(\S+)/) { |t| t.split[1] }
if last_task = tasks.index(prefs.transaction(true) { prefs[RAKEFILE_DIR] })
  tasks.unshift(tasks.slice!(last_task))
end

if task = Dialog.request_item( :title   =&gt; "Rake Tasks",
                               :prompt  =&gt; "Select a task to execute:",
                               :items   =&gt; tasks,
                               :button1 =&gt; "Run Task")
  prefs.transaction { prefs[RAKEFILE_DIR] = task }
  
  testing = task =~ /test/i || task == DEFAULT_TASK
  print &lt;&lt;START_HTML
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Rake TextMate Runtime&lt;/title&gt;
    &lt;link rel="stylesheet" href="file://#{e_url ENV['TM_BUNDLE_SUPPORT']}/pastel.css" type="text/css"&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="script_output" class="framed"&gt;
    &lt;pre&gt;&lt;strong&gt;RakeMate r#{RAKEMATE_VERSION} running Ruby v#{RUBY_VERSION}.&lt;/strong&gt;
&lt;strong&gt;&amp;gt;&amp;gt;&amp;gt; #{Dir.pwd}&lt;/strong&gt;
&lt;div id="actual_output" style="-khtml-line-break: after-white-space;"&gt;
START_HTML
  open("|#{rake} #{task == "(default task)" ? "" : task} 2&gt;&amp;1") do |output|
	  while line = output.gets
	    if testing and line =~ /^\d+ tests, \d+ assertions, (\d+) failures, (\d+) errors/
	      print "&lt;span style=\"color: ",
	            ($1 + $2 == "00" ? "green" : "red"),
	            "\"&gt;#{line.chomp}&lt;/span&gt;&lt;br /&gt;"
	    elsif testing and line =~ /^(\s+)((\S+):(\d+))(:in.*)$/ and File.exist? $3
	      print "#{$1}&lt;a href='txmt://open?url=file://#{u(File.expand_path($3))}&amp;line=#{$4}'&gt;#{$2}&lt;/a&gt;#{$5.strip}&lt;br /&gt;"
      else
	      print h(line).sub("\n", "&lt;br /&gt;")
      end
	    $stdout.flush
	    if testing and line =~ /^Started\s*/
	      wrap = 0
	      while test = output.getc.chr
	        wrap += 1
	        if %w[. E F].include? test
	          print test.sub(/^[EF]$/, "&lt;span style=\"color: red\"&gt;\\&amp;&lt;/span&gt;"),
	                (wrap % 80 == 0 ? "&lt;br /&gt;" : "&lt;br style=\"display: none\"/&gt;")
	          $stdout.flush
          else
	          print test.sub("\n", "&lt;br /&gt;")
	          $stdout.flush
	          break
          end
        end
      end
	  end
  end
  print &lt;&lt;END_HTML
    &lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
END_HTML
end
</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>^R</string>
	<key>name</key>
	<string>Run Rake Task</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>uuid</key>
	<string>569C9822-8C41-4907-94C7-1A8A0031B66D</string>
</dict>
</plist>
