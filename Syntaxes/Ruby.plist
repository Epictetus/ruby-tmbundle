<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>
	TODO: unresolved issues

	text:
	"p &lt;&lt; end
	print me!
	end"
	symptoms:
	not recognized as a heredoc
	solution:
	there is no way to distinguish perfectly between the &lt;&lt; operator and the start
	of a heredoc. Currently, we require assignment to recognize a heredoc. More
	refinement is possible.
	• Heredocs with indented terminators (&lt;&lt;-) are always distinguishable, however.
	• Nested heredocs are not really supportable at present

	text:
	"a\332a"
	symptoms:
	'\332' is not recognized as slash3.. which should be octal 332.
	solution:
	plain regexp.. should be easy.

	text:	
	32 / 22 + 42 / 57
	symptoms:
	'/ 22 + 42 /' is recognized as regexp..
	solution:
	there is lots of ambiguity between division and regexp.
	no solution at this moment... difficult.

    text:
    val?(a):p(b)
    val?'a':'b'
    symptoms:
    ':p' is recognized as a symbol.. its 2 things ':' and 'p'.
    :'b' has same problem.
    solution:
    ternary operator rule, precedence stuff, symbol rule.
    but also consider 'a.b?(:c)' ??
</string>
	<key>fileTypes</key>
	<array>
		<string>rb</string>
		<string>Rakefile</string>
		<string>rake</string>
		<string>cgi</string>
		<string>fcgi</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!/.*\bruby\b</string>
	<key>foldingStartMarker</key>
	<string>^\s*(def|([^#])*(?&lt;=\s|^)do\b)\b(?!.*\bend\b\s*(#.*)?$)</string>
	<key>foldingStopMarker</key>
	<string>(^\s*end|;\s*end)\s*(#.*)?$</string>
	<key>keyEquivalent</key>
	<string>^~R</string>
	<key>name</key>
	<string>Ruby</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>comment</key>
			<string>everything being a reserved word, not a value and needing a 'end' is a..</string>
			<key>match</key>
			<string>(?&lt;!\.)\b(BEGIN|begin|case|class|else|elsif|END|end|ensure|for|if|in|module|rescue|then|unless|until|when|while)\b(?![?!])</string>
			<key>name</key>
			<string>keyword.control.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>contextual smart pair support for block parameters</string>
			<key>match</key>
			<string>(?&lt;!\.)\bdo\b\s*</string>
			<key>name</key>
			<string>keyword.control.ruby.start-block</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>contextual smart pair support</string>
			<key>match</key>
			<string>\{(\s*)(\})?</string>
			<key>name</key>
			<string>meta.syntax.ruby.start-block</string>
		</dict>
		<dict>
			<key>comment</key>
			<string> as above, just doesn't need a 'end' and does a logic operation</string>
			<key>match</key>
			<string>(?&lt;!\.)\b(and|not|or)\b</string>
			<key>name</key>
			<string>keyword.operator.logical.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string> just as above but being not a logical operation</string>
			<key>match</key>
			<string>(?&lt;!\.)\b(alias|alias_method|break|next|redo|retry|return|super|undef|yield)\b(?![?!])|\bdefined\?</string>
			<key>name</key>
			<string>keyword.control.pseudo-method.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string> every reserved word, being a value is a..</string>
			<key>match</key>
			<string>\b(nil|true|false|__(FILE|LINE)__|self)\b(?![?!])</string>
			<key>name</key>
			<string>constant.language.pseudo-variable.ruby</string>
		</dict>
		<dict>
			<key>comment</key>
			<string> everything being a method but having a special function is a..</string>
			<key>match</key>
			<string>\b(initialize|new|loop|include|require|raise|attr_reader|attr_writer|attr_accessor|attr|catch|throw|private|public|protected)\b(?![?!])</string>
			<key>name</key>
			<string>keyword.other.special-method.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>@[a-zA-Z_]\w*</string>
			<key>name</key>
			<string>variable.other.readwrite.instance.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>@@[a-zA-Z_]\w*</string>
			<key>name</key>
			<string>variable.other.readwrite.class.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\$[a-zA-Z_]\w*</string>
			<key>name</key>
			<string>variable.other.readwrite.global.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\$(!|@|&amp;|`|'|\+|\d|~|=|/|\\|,|;|\.|&lt;|&gt;|_|\*|\$|\?|:|"|-[0adFiIlpv])</string>
			<key>name</key>
			<string>variable.other.readwrite.global.pre-defined.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b[A-Z]\w*\b</string>
			<key>name</key>
			<string>variable.other.constant.ruby</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(def)\b\s+((?&gt;[a-zA-Z_]\w*(?&gt;\.|::))?(?&gt;[a-zA-Z_]\w*(?&gt;[?!]|=(?!&gt;))?|===?|&gt;[&gt;=]?|&lt;[&lt;=]?|&lt;=&gt;|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?))\s*\(</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.def.ruby</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string> the method pattern comes from the symbol pattern, see there for a explaination</string>
			<key>contentName</key>
			<string>variable.parameter</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>declaration.function.method.with-arguments.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.def.ruby</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ruby</string>
				</dict>
			</dict>
			<key>comment</key>
			<string> the optional name is just to catch the def also without a method-name</string>
			<key>match</key>
			<string>\b(def)\b(\s+((?&gt;[a-zA-Z_]\w*(?&gt;\.|::))?(?&gt;[a-zA-Z_]\w*(?&gt;[?!]|=(?!&gt;))?|===?|&gt;[&gt;=]?|&lt;[&lt;=]?|&lt;=&gt;|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?)))?</string>
			<key>name</key>
			<string>declaration.function.method.without-arguments.ruby</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(0[xX]\h(?&gt;_?\h)*|\d(?&gt;_?\d)*(\.(?&gt;_?\d)*)?([eE][-+]?(?&gt;_?\d)*)?|0[bB][01]+)\b</string>
			<key>name</key>
			<string>constant.numeric.ruby</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.class.ruby</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.class.ruby</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.ruby</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>variable.other.object.ruby</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(class)\s+(([.a-zA-Z0-9_:]+(\s*&lt;\s*[.a-zA-Z0-9_:]+)?)|(&lt;&lt;\s*[.a-zA-Z0-9_:]+))</string>
			<key>name</key>
			<string>declaration.class.ruby</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.module.ruby</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.module.ruby</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.other.parent-module.ruby</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(module)\s+((([A-Z]\w*::)*)[A-Z]\w*)</string>
			<key>name</key>
			<string>declaration.module.ruby</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>:'</string>
			<key>end</key>
			<string>'</string>
			<key>name</key>
			<string>constant.other.symbol.single-quoted.ruby</string>
			<key>swallow</key>
			<string>\\['\\]</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>:"</string>
			<key>end</key>
			<string>"</string>
			<key>name</key>
			<string>constant.other.symbol.double-quoted.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>comment</key>
			<string>single quoted string (does not allow interpolation)</string>
			<key>end</key>
			<string>'</string>
			<key>name</key>
			<string>string.quoted.single.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\'|\\\\</string>
					<key>name</key>
					<string>constant.character.escaped.ruby</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>comment</key>
			<string>double quoted string (allows for interpolation)</string>
			<key>end</key>
			<string>"</string>
			<key>name</key>
			<string>string.quoted.double.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>`</string>
			<key>comment</key>
			<string>execute string (allows for interpolation)</string>
			<key>end</key>
			<string>`</string>
			<key>name</key>
			<string>string.interpolated.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%x\{</string>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>string.interpolated.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_i</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%x\[</string>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\]</string>
			<key>name</key>
			<string>string.interpolated.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_i</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%x\&lt;</string>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\&gt;</string>
			<key>name</key>
			<string>string.interpolated.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_i</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%x\(</string>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>string.interpolated.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_i</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%x([^\w])</string>
			<key>comment</key>
			<string>execute string (allow for interpolation)</string>
			<key>end</key>
			<string>\1</string>
			<key>name</key>
			<string>string.interpolated.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>/(?=.*/)</string>
			<key>comment</key>
			<string>regular expressions (normal)</string>
			<key>end</key>
			<string>/[eimnosux]*</string>
			<key>name</key>
			<string>string.regexp.classic.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%r\{</string>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\}[eimnosux]*</string>
			<key>name</key>
			<string>string.regexp.mod-r.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_r</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%r\[</string>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\][eimnosux]*</string>
			<key>name</key>
			<string>string.regexp.mod-r.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_r</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%r\(</string>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\)[eimnosux]*</string>
			<key>name</key>
			<string>string.regexp.mod-r.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_r</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%r\&lt;</string>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\&gt;[eimnosux]*</string>
			<key>name</key>
			<string>string.regexp.mod-r.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_r</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%r([^\w])</string>
			<key>comment</key>
			<string>regular expressions (literal)</string>
			<key>end</key>
			<string>\1[eimnosux]*</string>
			<key>name</key>
			<string>string.regexp.mod-r.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[QWSR]?\(</string>
			<key>comment</key>
			<string>literal capable of interpolation ()</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>string.quoted.literal.upper.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_i</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[QWSR]?\[</string>
			<key>comment</key>
			<string>literal capable of interpolation []</string>
			<key>end</key>
			<string>\]</string>
			<key>name</key>
			<string>string.quoted.literal.upper.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_i</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[QWSR]?\&lt;</string>
			<key>comment</key>
			<string>literal capable of interpolation &lt;&gt;</string>
			<key>end</key>
			<string>\&gt;</string>
			<key>name</key>
			<string>string.quoted.literal.upper.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_i</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[QWSR]?\{</string>
			<key>comment</key>
			<string>literal capable of interpolation -- {}</string>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>string.quoted.double.ruby.mod</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_i</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[QWSR]([^\w])</string>
			<key>comment</key>
			<string>literal capable of interpolation -- wildcard</string>
			<key>end</key>
			<string>\1</string>
			<key>name</key>
			<string>string.quoted.literal.upper.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%([^\w\s&gt;])</string>
			<key>comment</key>
			<string>literal capable of interpolation -- wildcard</string>
			<key>end</key>
			<string>\1</string>
			<key>name</key>
			<string>string.quoted.literal.upper.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[qws]\(</string>
			<key>comment</key>
			<string>literal incapable of interpolation -- ()</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>string.quoted.literal.lower.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\)|\\\\</string>
					<key>name</key>
					<string>constant.character.escaped.ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[qws]\&lt;</string>
			<key>comment</key>
			<string>literal incapable of interpolation -- &lt;&gt;</string>
			<key>end</key>
			<string>\&gt;</string>
			<key>name</key>
			<string>string.quoted.literal.lower.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\&gt;|\\\\</string>
					<key>name</key>
					<string>constant.character.escaped.ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[qws]\[</string>
			<key>comment</key>
			<string>literal incapable of interpolation -- []</string>
			<key>end</key>
			<string>\]</string>
			<key>name</key>
			<string>string.quoted.literal.lower.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\]|\\\\</string>
					<key>name</key>
					<string>constant.character.escaped.ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[qws]\{</string>
			<key>comment</key>
			<string>literal incapable of interpolation -- {}</string>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>string.quoted.single.ruby.mod</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\}|\\\\</string>
					<key>name</key>
					<string>constant.character.escaped.ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly</string>
				</dict>
			</array>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>%[qws]([^\w])</string>
			<key>comment</key>
			<string>literal incapable of interpolation -- wildcard</string>
			<key>end</key>
			<string>\1</string>
			<key>name</key>
			<string>string.quoted.literal.lower.ruby</string>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>symbols</string>
			<key>match</key>
			<string>(?&lt;!:):(?&gt;[a-zA-Z_]\w*(?&gt;[?!]|=(?![&gt;=]))?|===?|&gt;[&gt;=]?|&lt;[&lt;=]?|&lt;=&gt;|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?|@@?[a-zA-Z_]\w*)</string>
			<key>name</key>
			<string>constant.other.symbol.ruby</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^=begin</string>
			<key>comment</key>
			<string>multiline comments</string>
			<key>end</key>
			<string>^=end</string>
			<key>name</key>
			<string>comment.documentation.ruby</string>
			<key>swallow</key>
			<string>\\.</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>#</string>
			<key>comment</key>
			<string>end of line comments, we use begin/end instead of match because TextMate always picks the longest match, but for begin/end rules that means the length of the begin-pattern only. This allows us to match “#.*?%&gt;” in a potential language which includes Ruby.</string>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>comment.line.number-sign.ruby</string>
		</dict>
		<dict>
			<!-- SIMON -->
			<key>match</key>
			<string>\?(\\x\h{1,2}(?!\h)\b|\\0[0-7]{1,2}(?![0-7])\b|\\[^x0]|[^\s\\])</string>
			<key>name</key>
			<string>constant.numeric.ruby</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^__END__\b</string>
			<key>comment</key>
			<string>__END__ marker</string>
			<key>end</key>
			<string>\z</string>
			<key>name</key>
			<string>string.unquoted.program-block.ruby</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;\=\s*&lt;&lt;(\w+))(?!\s+#\s*([Cc]|sh))</string>
			<key>end</key>
			<string>^\1$</string>
			<key>name</key>
			<string>string.unquoted.heredoc.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;&lt;&lt;-(\w+))</string>
			<key>comment</key>
			<string>heredoc with indented terminator</string>
			<key>end</key>
			<string>\s*\1$</string>
			<key>name</key>
			<string>string.unquoted.heredoc.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;\=\s*&lt;&lt;(\w+))(?=\s+#\s*[Cc](?!\+\+))</string>
			<key>end</key>
			<string>^\1$</string>
			<key>name</key>
			<string>string.unquoted.embedded.c.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.c</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;\=\s*&lt;&lt;(\w+))(?=\s+#\s*[Cc]\+\+)</string>
			<key>end</key>
			<string>^\1$</string>
			<key>name</key>
			<string>string.unquoted.embedded.cplusplus.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.c++</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?&gt;\=\s*&lt;&lt;(\w+))(?=\s+#\s*sh)</string>
			<key>end</key>
			<string>^\1$</string>
			<key>name</key>
			<string>string.unquoted.embedded.shell.ruby</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#heredoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.shell</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
			</array>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>escaped_char</key>
		<dict>
			<key>match</key>
			<string>\\.</string>
			<key>name</key>
			<string>constant.character.escaped.ruby</string>
		</dict>
		<key>heredoc</key>
		<dict>
			<key>begin</key>
			<string>^&lt;&lt;-?\w+</string>
			<key>end</key>
			<string>$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>interpolated_ruby</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>#\{</string>
					<key>end</key>
					<string>\}</string>
					<key>name</key>
					<string>source.ruby.embedded.source</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>#@[a-zA-Z_]\w*</string>
					<key>name</key>
					<string>variable.other.readwrite.instance.ruby</string>
				</dict>
				<dict>
					<key>match</key>
					<string>#@@[a-zA-Z_]\w*</string>
					<key>name</key>
					<string>variable.other.readwrite.class.ruby</string>
				</dict>
				<dict>
					<key>match</key>
					<string>#\$[a-zA-Z_]\w*</string>
					<key>name</key>
					<string>variable.other.readwrite.global.ruby</string>
				</dict>
			</array>
		</dict>
		<key>nest_brackets</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#nest_brackets</string>
				</dict>
			</array>
		</dict>
		<key>nest_brackets_i</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_i</string>
				</dict>
			</array>
		</dict>
		<key>nest_brackets_r</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_brackets_r</string>
				</dict>
			</array>
		</dict>
		<key>nest_curly</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#nest_curly</string>
				</dict>
			</array>
		</dict>
		<key>nest_curly_i</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_i</string>
				</dict>
			</array>
		</dict>
		<key>nest_curly_r</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_curly_r</string>
				</dict>
			</array>
		</dict>
		<key>nest_ltgt</key>
		<dict>
			<key>begin</key>
			<string>\&lt;</string>
			<key>end</key>
			<string>\&gt;</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#nest_ltgt</string>
				</dict>
			</array>
		</dict>
		<key>nest_ltgt_i</key>
		<dict>
			<key>begin</key>
			<string>\&lt;</string>
			<key>end</key>
			<string>\&gt;</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_i</string>
				</dict>
			</array>
		</dict>
		<key>nest_ltgt_r</key>
		<dict>
			<key>begin</key>
			<string>\&lt;</string>
			<key>end</key>
			<string>\&gt;</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_ltgt_r</string>
				</dict>
			</array>
		</dict>
		<key>nest_parens</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#nest_parens</string>
				</dict>
			</array>
		</dict>
		<key>nest_parens_i</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_i</string>
				</dict>
			</array>
		</dict>
		<key>nest_parens_r</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regex_sub</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#interpolated_ruby</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#nest_parens_r</string>
				</dict>
			</array>
		</dict>
		<key>regex_sub</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>can someone explain what this is for? I don't understand why we're highlighting a dot as an escaped char.</string>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>constant.character.escaped.ruby</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\{\d+(,\d+)?\}</string>
					<key>name</key>
					<string>string.regexp.arbitrary-repitition.ruby</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>end</key>
					<string>\]</string>
					<key>name</key>
					<string>string.regexp.character-class.ruby</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regex_sub</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>string.regexp.group.ruby</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regex_sub</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.ruby</string>
	<key>uuid</key>
	<string>E00B62AC-6B1C-11D9-9B1F-000D93589AF6</string>
</dict>
</plist>
